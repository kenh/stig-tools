#!/usr/bin/perl
#
# Copy FINDING_DETAILS to COMMENTS if the status is NotAFinding
#

use XML::LibXML;

if ($#ARGV != 1) {
	usage();
}

$input = XML::LibXML->load_xml(location => $ARGV[0]);

@vuls = $input->findnodes('/CHECKLIST/STIGS/iSTIG/VULN');

die "No vulnerabilities found in $ARGV[0]\n" if (scalar(@vuls) == 0);

foreach my $vul (@vuls) {
	my $v = $vul->findvalue('STIG_DATA[VULN_ATTRIBUTE="Vuln_Num"]/ATTRIBUTE_DATA');

	die "Internal error: cannot find vulnerability number\n"
		if (! defined($v) || $v eq '');

	my $status = $vul->findvalue('STATUS');

	if ($status ne 'NotAFinding' && $status ne 'Not_Applicable') {
		print "Skipping $v, status is $status\n";
		next;
	}

	my $details = $vul->findvalue('FINDING_DETAILS');

	if (defined($details) && $details ne '') {
		print "Copying FINDING_DETAILS to COMMENTS for $v\n";

		my $comments = ($vul->findnodes('COMMENTS'))[0];

		die "Internal error: no COMMENTS for $v\n"
			if (! defined($comments));

		my ($ct) = $comments->childNodes();

		if (defined($ct)) {
			$ct->setData($details);
		} else {
			$comments->appendTextNode($details);
		}
	}
}

#
# Make sure we don't have any self-closing tags
#

for my $node ($input->findnodes('//*[not(node())]')) {
	$node->appendChild($input->createTextNode(''));
}

$input->toFile($ARGV[1], 0);

exit 0;

sub usage {
	print <<"EOF";
Usage:	$0 input-file output-file
EOF
	exit 1;
}
